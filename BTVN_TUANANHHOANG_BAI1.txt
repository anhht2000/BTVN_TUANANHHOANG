// bài tập về nhà
    //bài 1
    class Familly {
        static plant = "eats something";
        constructor(name, speed) {
            this.name = name;
            this.speed =  speed;
        }
        run(speed = 0){
            this.speed += speed;
            console.log((`${this.name} runs ${this.speed}`));
        }

        static compare(famillyOne, famillyTwo){
            return famillyOne.speed - famillyTwo.speed;
        }
    }

    class Julia extends Familly {
        hidden(){
            alert(`${this.name} is hiddens`);
        }

    }
    
    let julias = [
        new Julia("Julia is Junia", 10),
        new Julia("Julia is not Junia", 5)
    ]
    julias.sort(Julia.compare); //Là array [Julia("Julia is not Junia", 5),Julia("Julia is Junia", 10)] vì đối
    //số truyênf vào của julias.sort là 1 callback static compare của Julia kết thừa từ Family callback truyền
    // vào sort thì mảng sẽ được sắp xếp theo thứ tự tăng dần 
        
    julias[0].run() //Julia is not Junia runs 5 vì sau khi sắp xếp thì phần từ đầu tiên chính là new Julia("Julia is Junia", 10)
    // mà method run lại là 1 method thừa kế từ lớp Family nên khi khởi tạo julias cũng có method này để sử dụng
    Julia.plant; //eats something vì plant là 1 static method của class Julia kế thừa từ Family nên từ class gọi đến plan thì
    // sẽ có giá trị eats something

    //bài 2

    function funcPromise(srcParam){
        return new Promise(function(resovle,reject){
            let script = document.createElement('script'); 
            script.src =  srcParam;
            script.onload = () => { 
                resovle(1)
            }
            script.onerror = () => reject(new Error(`script not load ${src}`))
            document.head.append(script);
        })
    }
    let active = funcPromise('https://code.jquery.com/jquery-3.6.0.js')
    console.log(active);
    active
        .then((data)=>{
            console.log(data);
            alert(`yeah, you can get script :D${data.src} `)
        })
        .catch((err)=>{
            console.log("Error :",err);
        })